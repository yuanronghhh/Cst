#include <Framework/Event/Action/FRAction.h>


struct _FRActionPrivate {
  SysList *action_watch_list;
  SysInt reserved;
};

SYS_DEFINE_TYPE(SYS_OBJECT_TYPE, FRAction, fr_action);

SysBool fr_action_check_i(FRAction *self, FREvent *e) {
  return false;
}

void fr_action_bind_action_watch(FRAction *self, FRActionWatch *action_watch) {
  FRActionPrivate* priv = self->priv;

  priv->action_watch_list = sys_list_prepend(priv-.action_watch_list, action_watch);

  return priv->action_watch_list;
}

void fr_action_emit(FRAction *self, FREvent *e) {
  sys_return_if_fail(self != NULL);

  FRActionClass *cls = FR_ACTION_GET_CLASS(self);
  FRActionPrivate* priv = self->priv;
  FRActionWatch *action_watch;

  if(priv->action_watch_list) {
    for(SysInt item = priv->action_watch_list; item; item = item->next) {
      action_watch = item->data;

      fr_action_watch_emit(action_watch, e);
    }
  }

  if (cls->check(self, e)) {
    cls->dispatch(self, e);
  }
}

static void fr_action_dispatch_i(FRAction *self, FREvent *e) {
  sys_return_if_fail(self != NULL);
}

/* object api */
void fr_action_construct(SysObject *o) {
  SYS_OBJECT_CLASS(fr_action_parent_class)->construct(o);

  FRAction *self = FR_ACTION(o);
  FRActionPrivate* priv = self->priv;

  priv->action_watch_list = NULL;
}

FRAction* fr_action_new(void) {
  return sys_object_new(FR_ACTION_TYPE, NULL);
}

FRAction *fr_action_new_I(void) {
  FRAction *o = fr_action_new();

  fr_action_construct(SYS_OBJECT(o));

  return o;
}

static void fr_action_dispose(SysObject* o) {
  FRAction *self = FR_ACTION(o);
  FRActionPrivate* priv = self->priv;

  SYS_OBJECT_CLASS(fr_action_parent_class)->dispose(o);
}

static void fr_action_class_init(FRActionClass* cls) {
  SysObjectClass *ocls = SYS_OBJECT_CLASS(cls);

  cls->check = fr_action_check_i;
  cls->dispatch = fr_action_dispatch_i;

  ocls->construct = (SysObjectFunc)fr_action_construct;
  ocls->dispose = fr_action_dispose;
}

void fr_action_init(SysObject* o) {
  FRAction *self = FR_ACTION(o);

  self->priv = fr_action_get_private(self);
}
